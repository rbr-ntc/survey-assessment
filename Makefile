.PHONY: help build build-backend build-frontend push push-backend push-frontend deploy deploy-manual clean logs status restart down up dev prod

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
PROJECT_NAME := survey-assessment
REGISTRY := ghcr.io
REPO := $(shell git config --get remote.origin.url | sed 's/.*github.com[:/]\([^/]*\)\/\([^.]*\).*/\1\/\2/')
BACKEND_IMAGE := $(REGISTRY)/$(REPO)/backend
FRONTEND_IMAGE := $(REGISTRY)/$(REPO)/frontend
TAG := $(shell git rev-parse --short HEAD)

help: ## –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
	@echo "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m%-20s\033[0m %s\n", $$1, $$2}'

build: build-backend build-frontend ## –°–æ–±—Ä–∞—Ç—å –≤—Å–µ –æ–±—Ä–∞–∑—ã

build-backend: ## –°–æ–±—Ä–∞—Ç—å backend –æ–±—Ä–∞–∑
	@echo "üî® –°–æ–±–∏—Ä–∞—é backend –æ–±—Ä–∞–∑..."
	docker build -t $(BACKEND_IMAGE):$(TAG) -t $(BACKEND_IMAGE):latest ./backend

build-frontend: ## –°–æ–±—Ä–∞—Ç—å frontend –æ–±—Ä–∞–∑
	@echo "üî® –°–æ–±–∏—Ä–∞—é frontend –æ–±—Ä–∞–∑..."
	docker build -t $(FRONTEND_IMAGE):$(TAG) -t $(FRONTEND_IMAGE):latest ./system-analyst-assessment

push: push-backend push-frontend ## –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ –æ–±—Ä–∞–∑—ã –≤ registry

push-backend: ## –ó–∞–≥—Ä—É–∑–∏—Ç—å backend –æ–±—Ä–∞–∑ –≤ registry
	@echo "üì§ –ó–∞–≥—Ä—É–∂–∞—é backend –æ–±—Ä–∞–∑..."
	docker push $(BACKEND_IMAGE):$(TAG)
	docker push $(BACKEND_IMAGE):latest

push-frontend: ## –ó–∞–≥—Ä—É–∑–∏—Ç—å frontend –æ–±—Ä–∞–∑ –≤ registry
	@echo "üì§ –ó–∞–≥—Ä—É–∂–∞—é frontend –æ–±—Ä–∞–∑..."
	docker push $(FRONTEND_IMAGE):$(TAG)
	docker push $(FRONTEND_IMAGE):latest

deploy: ## –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –¥–µ–ø–ª–æ–π —á–µ—Ä–µ–∑ GitHub Actions
	@echo "üöÄ –ó–∞–ø—É—Å–∫–∞—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –¥–µ–ø–ª–æ–π..."
	@echo "–°–¥–µ–ª–∞–π—Ç–µ push –≤ –≤–µ—Ç–∫—É main –¥–ª—è –∑–∞–ø—É—Å–∫–∞ CI/CD pipeline"
	@echo "–ò–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ workflow –≤—Ä—É—á–Ω—É—é –≤ GitHub Actions"

deploy-manual: ## –†—É—á–Ω–æ–π –¥–µ–ø–ª–æ–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä
	@echo "üöÄ –ó–∞–ø—É—Å–∫–∞—é —Ä—É—á–Ω–æ–π –¥–µ–ø–ª–æ–π..."
	@chmod +x scripts/deploy.sh
	@./scripts/deploy.sh production

dev: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
	@echo "üõ†Ô∏è –ó–∞–ø—É—Å–∫–∞—é –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏..."
	docker compose up -d

prod: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å production –≤–µ—Ä—Å–∏—é
	@echo "üöÄ –ó–∞–ø—É—Å–∫–∞—é production –≤–µ—Ä—Å–∏—é..."
	docker compose -f docker-compose.prod.yml up -d

up: dev ## –ê–ª–∏–∞—Å –¥–ª—è dev

down: ## –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
	@echo "üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã..."
	docker compose down
	docker compose -f docker-compose.prod.yml down

restart: down up ## –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã

status: ## –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
	@echo "üìä –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:"
	@docker compose ps
	@echo ""
	@echo "üìä –°—Ç–∞—Ç—É—Å production –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:"
	@docker compose -f docker-compose.prod.yml ps

logs: ## –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
	@echo "üìù –õ–æ–≥–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤:"
	@docker compose logs -f

logs-backend: ## –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ backend
	@echo "üìù –õ–æ–≥–∏ backend:"
	@docker compose logs -f backend

logs-frontend: ## –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ frontend
	@echo "üìù –õ–æ–≥–∏ frontend:"
	@docker compose logs -f frontend

logs-mongo: ## –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ MongoDB
	@echo "üìù –õ–æ–≥–∏ MongoDB:"
	@docker compose logs -f mongo

clean: ## –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –æ–±—Ä–∞–∑—ã –∏ volumes
	@echo "üßπ –û—á–∏—â–∞—é Docker..."
	@docker compose down -v
	@docker compose -f docker-compose.prod.yml down -v
	@docker image prune -f
	@docker volume prune -f

test: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã
	@echo "üß™ –ó–∞–ø—É—Å–∫–∞—é —Ç–µ—Å—Ç—ã..."
	@cd backend && python -m pytest tests/ -v
	@cd system-analyst-assessment && npm test

install: ## –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
	@echo "üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏..."
	@cd backend && pip install -r requirements.txt
	@cd system-analyst-assessment && npm install

setup: install ## –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ–µ–∫—Ç
	@echo "‚öôÔ∏è –ù–∞—Å—Ç—Ä–∞–∏–≤–∞—é –ø—Ä–æ–µ–∫—Ç..."
	@cp backend/.env.example backend/.env 2>/dev/null || echo "–°–æ–∑–¥–∞–π—Ç–µ backend/.env —Ñ–∞–π–ª"
	@cp system-analyst-assessment/.env.example system-analyst-assessment/.env 2>/dev/null || echo "–°–æ–∑–¥–∞–π—Ç–µ system-analyst-assessment/.env —Ñ–∞–π–ª"

mongo-init: ## –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å MongoDB —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏
	@echo "üóÑÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é MongoDB..."
	@docker exec survey-assessment-mongo-1 mongosh assessment --eval "db.questions.countDocuments()" || echo "MongoDB –Ω–µ –∑–∞–ø—É—â–µ–Ω"

health: ## –ü—Ä–æ–≤–µ—Ä–∏—Ç—å health check endpoints
	@echo "üè• –ü—Ä–æ–≤–µ—Ä—è—é health endpoints..."
	@curl -f http://localhost:8000/health || echo "Backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
	@curl -f http://localhost:3000 || echo "Frontend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"

# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Git
commit: ## –°–¥–µ–ª–∞—Ç—å –∫–æ–º–º–∏—Ç —Å —Ç–µ–∫—É—â–∏–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏
	@echo "üíæ –î–µ–ª–∞—é –∫–æ–º–º–∏—Ç..."
	@git add .
	@git commit -m "Update: $(shell date +%Y-%m-%d_%H-%M-%S)"

push: ## –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ remote
	@echo "üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –∏–∑–º–µ–Ω–µ–Ω–∏—è..."
	@git push origin main

pull: ## –ü–æ–ª—É—á–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å remote
	@echo "üì• –ü–æ–ª—É—á–∞—é –∏–∑–º–µ–Ω–µ–Ω–∏—è..."
	@git pull origin main

# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Docker
images: ## –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –æ–±—Ä–∞–∑—ã
	@echo "üê≥ Docker –æ–±—Ä–∞–∑—ã:"
	@docker images | grep -E "(survey|assessment)"

volumes: ## –ü–æ–∫–∞–∑–∞—Ç—å volumes
	@echo "üíæ Docker volumes:"
	@docker volume ls | grep survey

networks: ## –ü–æ–∫–∞–∑–∞—Ç—å —Å–µ—Ç–∏
	@echo "üåê Docker —Å–µ—Ç–∏:"
	@docker network ls | grep survey

# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
stats: ## –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤
	@echo "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤:"
	@docker stats --no-stream

top: ## –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞—Ö
	@echo "üìà –ü—Ä–æ—Ü–µ—Å—Å—ã –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞—Ö:"
	@docker compose top

# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
shell-backend: ## –û—Ç–∫—Ä—ã—Ç—å shell –≤ backend –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
	@echo "üêö –û—Ç–∫—Ä—ã–≤–∞—é shell –≤ backend –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ..."
	@docker compose exec backend /bin/bash

shell-frontend: ## –û—Ç–∫—Ä—ã—Ç—å shell –≤–æ frontend –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
	@echo "üêö –û—Ç–∫—Ä—ã–≤–∞—é shell –≤–æ frontend –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ..."
	@docker compose exec frontend /bin/sh

shell-mongo: ## –û—Ç–∫—Ä—ã—Ç—å shell –≤ MongoDB –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
	@echo "üêö –û—Ç–∫—Ä—ã–≤–∞—é shell –≤ MongoDB –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ..."
	@docker compose exec mongo mongosh assessment

# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è backup
backup: ## –°–æ–∑–¥–∞—Ç—å backup MongoDB
	@echo "üíæ –°–æ–∑–¥–∞—é backup MongoDB..."
	@mkdir -p backups
	@docker compose exec mongo mongodump --db assessment --out /tmp/backup
	@docker cp survey-assessment-mongo-1:/tmp/backup ./backups/backup_$(shell date +%Y%m%d_%H%M%S)
	@echo "Backup —Å–æ–∑–¥–∞–Ω –≤ ./backups/"

restore: ## –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å MongoDB –∏–∑ backup
	@echo "üîÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é MongoDB –∏–∑ backup..."
	@echo "–£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ backup –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: BACKUP_PATH=./backups/backup_YYYYMMDD_HHMMSS"
	@if [ -z "$(BACKUP_PATH)" ]; then echo "–û—à–∏–±–∫–∞: —É–∫–∞–∂–∏—Ç–µ BACKUP_PATH"; exit 1; fi
	@docker compose exec mongo mongorestore --db assessment --drop $(BACKUP_PATH)/assessment
