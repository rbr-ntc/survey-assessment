name: Deploy to Production

on:
  push:
    branches: [main, master]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      SERVER_HOST: ${{ secrets.SERVER_HOST }}
      SERVER_USER: ${{ secrets.SERVER_USER }}
      SERVER_SSH_KEY: ${{ secrets.SERVER_SSH_KEY }}
      FRONTEND_API_URL: ${{ secrets.FRONTEND_API_URL }}
      API_KEY: ${{ secrets.API_KEY }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      CORS_ORIGINS: ${{ secrets.CORS_ORIGINS }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/survey-assessment-backend:${{ github.sha }},${{ secrets.DOCKERHUB_USERNAME }}/survey-assessment-backend:latest
          build-args: |
            CORS_ORIGINS=${{ secrets.CORS_ORIGINS }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./system-analyst-assessment
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/survey-assessment-frontend:${{ github.sha }},${{ secrets.DOCKERHUB_USERNAME }}/survey-assessment-frontend:latest
          build-args: |
            NEXT_PUBLIC_API_URL=${{ secrets.FRONTEND_API_URL }}
            NEXT_PUBLIC_API_KEY=${{ secrets.API_KEY }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Deploy to server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            # Переходим в директорию проекта
            cd /opt/survey-assessment

            # Останавливаем существующие контейнеры если они запущены
            if docker compose ps | grep -q "Up"; then
              echo "Stopping existing containers..."
              docker compose down
            fi

            # Удаляем старые образы для экономии места
            docker image prune -f

            # Обновляем код
            git pull origin main

            # Создаем .env файл для production
            cat > .env << EOF
            MONGO_URL=mongodb://mongo:27017/assessment
            OPENAI_API_KEY=${{ env.OPENAI_API_KEY }}
            API_KEY=${{ env.API_KEY }}
            CORS_ORIGINS=${{ env.CORS_ORIGINS }}
            EOF

            # Создаем docker-compose.prod.yml для production
            cat > docker-compose.prod.yml << EOF
            version: '3.8'

            services:
              mongo:
                image: mongo:6
                restart: always
                ports:
                  - "27017:27017"
                volumes:
                  - mongo_data:/data/db
                  - ./mongo-init:/docker-entrypoint-initdb.d
                environment:
                  - MONGO_INITDB_DATABASE=assessment

              backend:
                image: ${{ env.DOCKERHUB_USERNAME }}/survey-assessment-backend:latest
                restart: always
                environment:
                  - MONGO_URL=mongodb://mongo:27017/assessment
                  - CORS_ORIGINS=${{ secrets.CORS_ORIGINS }}
                  - API_KEY=${{ secrets.API_KEY }}
                  - OPENAI_API_KEY=${{ env.OPENAI_API_KEY }}
                ports:
                  - "8000:8000"
                depends_on:
                  - mongo

              frontend:
                image: ${{ env.DOCKERHUB_USERNAME }}/survey-assessment-frontend:latest
                restart: always
                ports:
                  - "3000:3000"
                depends_on:
                  - backend

            volumes:
              mongo_data:
            EOF

            # Создаем директорию для инициализации MongoDB
            mkdir -p mongo-init

            # Копируем вопросы в директорию инициализации
            cp backend/improved-test-questions.json mongo-init/

            # Создаем скрипт инициализации MongoDB
            cat > mongo-init/init.js << EOF
            db = db.getSiblingDB('assessment');

            // Удаляем существующую коллекцию
            db.questions.drop();

            // Импортируем вопросы
            const questions = JSON.parse(cat('/docker-entrypoint-initdb.d/improved-test-questions.json'));
            db.questions.insertMany(questions);

            // Создаем индексы
            db.questions.createIndex({ "id": 1 });
            db.questions.createIndex({ "category": 1 });

            print('MongoDB initialized successfully with ' + questions.length + ' questions');
            EOF

            # Запускаем контейнеры
            docker compose -f docker-compose.prod.yml up -d

            # Ждем запуска MongoDB
            echo "Waiting for MongoDB to start..."
            sleep 30

            # Проверяем статус
            docker compose -f docker-compose.prod.yml ps

            # Проверяем подключение к MongoDB и принудительно импортируем вопросы
            echo "Checking MongoDB connection and importing questions..."
            docker exec survey-assessment-mongo-1 mongosh --eval "db.runCommand('ping')" assessment

            # Принудительно импортируем вопросы (на случай если init.js не сработал)
            echo "Forcing questions import..."
            docker exec survey-assessment-mongo-1 mongoimport --db assessment --collection questions --drop --file /docker-entrypoint-initdb.d/improved-test-questions.json --jsonArray

            # Проверяем количество вопросов
            echo "Checking questions count..."
            docker exec survey-assessment-mongo-1 mongosh --eval "db.questions.countDocuments()" assessment

            echo "Deployment completed successfully!"
