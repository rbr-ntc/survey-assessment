name: Deploy to Production

on:
  push:
    branches: [main, master]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      SERVER_HOST: ${{ secrets.SERVER_HOST }}
      SERVER_USER: ${{ secrets.SERVER_USER }}
      SERVER_SSH_KEY: ${{ secrets.SERVER_SSH_KEY }}
      FRONTEND_API_URL: ${{ secrets.FRONTEND_API_URL }}
      API_KEY: ${{ secrets.API_KEY }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      CORS_ORIGINS: ${{ secrets.CORS_ORIGINS }}
      ENABLE_QUICK_TEST: ${{ secrets.ENABLE_QUICK_TEST }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/survey-assessment-backend:${{ github.sha }},${{ secrets.DOCKERHUB_USERNAME }}/survey-assessment-backend:latest
          build-args: |
            CORS_ORIGINS=${{ secrets.CORS_ORIGINS }}
            ENABLE_QUICK_TEST=${{ secrets.ENABLE_QUICK_TEST }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./system-analyst-assessment
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/survey-assessment-frontend:${{ github.sha }},${{ secrets.DOCKERHUB_USERNAME }}/survey-assessment-frontend:latest
          build-args: |
            NEXT_PUBLIC_API_URL=${{ secrets.FRONTEND_API_URL }}
            NEXT_PUBLIC_API_KEY=${{ secrets.API_KEY }}
            NEXT_PUBLIC_ENABLE_QUICK_TEST=${{ secrets.ENABLE_QUICK_TEST }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Deploy to server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            # Переходим в директорию проекта
            cd /opt/survey-assessment

            # Останавливаем существующие контейнеры если они запущены
            if docker compose ps | grep -q "Up"; then
              echo "Stopping existing containers..."
              docker compose down
            fi

            # Удаляем старые образы для экономии места
            docker image prune -f

            # Удаляем старые образы survey-assessment
            echo "Removing old survey-assessment images..."
            docker images | grep survey-assessment | awk '{print $3}' | xargs -r docker rmi -f || true

            # Обновляем код
            git pull origin main

            # Создаем .env файл для production
            cat > .env << EOF
            MONGO_URL=mongodb://mongo:27017/assessment
            OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
            API_KEY=${{ secrets.API_KEY }}
            CORS_ORIGINS=${{ secrets.CORS_ORIGINS }}
            EOF

            # Создаем директорию для SSL сертификатов
            mkdir -p ssl

            # Создаем SSL сертификат из GitHub Secrets
            if [ ! -z "${{ secrets.SSL_CERTIFICATE }}" ]; then
                echo "🔐 Создаем SSL сертификат из GitHub Secrets..."
                echo "${{ secrets.SSL_CERTIFICATE }}" > ssl/fullchain.crt
                echo "${{ secrets.SSL_PRIVATE_KEY }}" > ssl/privkey.key
                
                # Устанавливаем правильные права доступа
                chmod 600 ssl/privkey.key
                chmod 644 ssl/fullchain.crt
                chown root:root ssl/privkey.key ssl/fullchain.crt
                
                echo "✅ SSL сертификаты созданы с правильными правами"
            else
                echo "⚠️ SSL сертификаты не найдены в GitHub Secrets"
                echo "💡 Добавьте SSL_CERTIFICATE и SSL_PRIVATE_KEY в GitHub Secrets"
            fi

            # Создаем docker-compose.prod.yml для production с Nginx
            cat > docker-compose.prod.yml << EOF
            version: '3.8'

            services:
              nginx:
                image: nginx:alpine
                container_name: survey-assessment-nginx
                ports:
                  - "80:80"
                  - "443:443"
                volumes:
                  - ./nginx.conf:/etc/nginx/nginx.conf
                  - ./ssl:/etc/nginx/ssl
                depends_on:
                  - frontend
                  - backend
                restart: unless-stopped
                networks:
                  - survey-network

              frontend:
                image: ${{ secrets.DOCKERHUB_USERNAME }}/survey-assessment-frontend:latest
                container_name: survey-assessment-frontend
                environment:
                  - NODE_ENV=production
                  - NEXT_PUBLIC_API_URL=https://evaly.ru/api
                  - NEXT_PUBLIC_API_KEY=${{ secrets.API_KEY }}
                  - NEXT_PUBLIC_ENABLE_QUICK_TEST=${{ secrets.ENABLE_QUICK_TEST }}
                expose:
                  - "3000"
                restart: unless-stopped
                networks:
                  - survey-network

              backend:
                image: ${{ secrets.DOCKERHUB_USERNAME }}/survey-assessment-backend:latest
                container_name: survey-assessment-backend
                environment:
                  - CORS_ORIGINS=${{ secrets.CORS_ORIGINS }}
                  - OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
                  - API_KEY=${{ secrets.API_KEY }}
                  - ENABLE_QUICK_TEST=${{ secrets.ENABLE_QUICK_TEST }}
                expose:
                  - "8000"
                restart: unless-stopped
                networks:
                  - survey-network

              mongo:
                image: mongo:6
                container_name: survey-assessment-mongo
                environment:
                  - MONGO_INITDB_DATABASE=assessment
                volumes:
                  - mongo_data:/data/db
                  - ./mongo-init:/docker-entrypoint-initdb.d
                expose:
                  - "27017"
                restart: unless-stopped
                networks:
                  - survey-network

            volumes:
              mongo_data:

            networks:
              survey-network:
                driver: bridge
            EOF

            # Создаем директорию для инициализации MongoDB
            mkdir -p mongo-init

            # Копируем вопросы в директорию инициализации
            cp backend/improved-test-questions.json mongo-init/

            # Настраиваем HTTPS с Nginx
            echo "🔒 Настраиваем HTTPS..."

            # Устанавливаем Nginx и Certbot
            apt update -y
            apt install -y nginx certbot python3-certbot-nginx

            # Останавливаем Nginx для настройки
            systemctl stop nginx

            # Копируем конфигурацию Nginx
            cp nginx.conf /etc/nginx/sites-available/survey-assessment
            ln -sf /etc/nginx/sites-available/survey-assessment /etc/nginx/sites-enabled/
            rm -f /etc/nginx/sites-enabled/default

            # Проверяем конфигурацию
            nginx -t

            # Запускаем Nginx
            systemctl start nginx
            systemctl enable nginx

            # Открываем порты в firewall
            ufw allow 80
            ufw allow 443
            ufw allow 22
            ufw --force enable

            # Генерируем SSL сертификат
            echo "🔐 Генерируем SSL сертификат..."
            certbot --nginx -d evaly.ru -d www.evaly.ru --non-interactive --agree-tos --email admin@example.com

            # Настраиваем автообновление сертификата
            (crontab -l 2>/dev/null; echo "0 12 * * * /usr/bin/certbot renew --quiet") | crontab -

            # Перезапускаем Nginx
            systemctl reload nginx

            # Создаем скрипт инициализации MongoDB
            cat > mongo-init/init.js << EOF
            db = db.getSiblingDB('assessment');

            // Удаляем существующую коллекцию
            db.questions.drop();

            // Импортируем вопросы
            const questions = JSON.parse(cat('/docker-entrypoint-initdb.d/improved-test-questions.json'));
            db.questions.insertMany(questions);

            // Создаем индексы
            db.questions.createIndex({ "id": 1 });
            db.questions.createIndex({ "category": 1 });

            print('MongoDB initialized successfully with ' + questions.length + ' questions');
            EOF

            # Принудительно получаем последние образы
            echo "Pulling latest images..."
            docker compose -f docker-compose.prod.yml pull

            # Проверяем, что образы обновились
            echo "Checking image timestamps..."
            docker images | grep survey-assessment

            # Принудительно перезапускаем контейнеры с новыми образами
            echo "Starting containers with latest images..."
            docker compose -f docker-compose.prod.yml up -d --force-recreate

            # Ждем запуска MongoDB
            echo "Waiting for MongoDB to start..."
            sleep 30

            # Проверяем статус
            docker compose -f docker-compose.prod.yml ps

            # Проверяем, что контейнеры запустились с новыми образами
            echo "Checking container image versions..."
            docker compose -f docker-compose.prod.yml images

            # Проверяем подключение к MongoDB и принудительно импортируем вопросы
            echo "Checking MongoDB connection and importing questions..."
            docker exec survey-assessment-mongo-1 mongosh --eval "db.runCommand('ping')" assessment

            # Принудительно импортируем вопросы (на случай если init.js не сработал)
            echo "Forcing questions import..."
            docker exec survey-assessment-mongo-1 mongoimport --db assessment --collection questions --drop --file /docker-entrypoint-initdb.d/improved-test-questions.json --jsonArray

            # Проверяем количество вопросов
            echo "Checking questions count..."
            docker exec survey-assessment-mongo-1 mongosh --eval "db.questions.countDocuments()" assessment

            echo "Deployment completed successfully!"
