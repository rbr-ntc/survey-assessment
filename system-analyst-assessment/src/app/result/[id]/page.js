'use client'
import { use, useEffect, useRef, useState } from 'react'
import ResultsScreen from '../../../components/ResultsScreen'

export default function ResultPage({ params }) {
	const { id } = use(params)
	const [result, setResult] = useState(null)
	const [loading, setLoading] = useState(true)
	const [error, setError] = useState(null)
	const [copied, setCopied] = useState(false)
	const pollingRef = useRef(null)

	// –ü–µ—Ä–≤—ã–π fetch —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
	useEffect(() => {
		let cancelled = false
		async function fetchInitial() {
			setLoading(true)
			setError(null)
			try {
				const res = await fetch(
					`${process.env.NEXT_PUBLIC_API_URL}/results/${id}`,
					{
						headers: {
							'x-api-key': process.env.NEXT_PUBLIC_API_KEY,
						},
					}
				)
				if (!res.ok) throw new Error('–†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω')
				const data = await res.json()
				if (!cancelled) setResult(data)
				if (!data.recommendations && !pollingRef.current) {
					startPolling()
				}
			} catch (e) {
				if (!cancelled) setError(e.message)
			} finally {
				if (!cancelled) setLoading(false)
			}
		}
		fetchInitial()
		return () => {
			cancelled = true
			if (pollingRef.current) clearInterval(pollingRef.current)
		}
	}, [id])

	// Polling —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
	function startPolling() {
		pollingRef.current = setInterval(async () => {
			try {
				const res = await fetch(
					`${process.env.NEXT_PUBLIC_API_URL}/results/${id}`,
					{
						headers: {
							'x-api-key': process.env.NEXT_PUBLIC_API_KEY,
						},
					}
				)
				if (!res.ok) return
				const data = await res.json()
				if (data.recommendations) {
					setResult(prev => ({
						...prev,
						recommendations: data.recommendations,
					}))
					clearInterval(pollingRef.current)
					pollingRef.current = null
				}
			} catch {}
		}, 3000)
	}

	if (loading) return <div className='p-8 text-center'>–ó–∞–≥—Ä—É–∑–∫–∞...</div>
	if (error) return <div className='p-8 text-center text-red-500'>{error}</div>
	if (!result) return null

	const handleCopyReport = () => {
		const reportText = `–û—Ç—á–µ—Ç –ø–æ –æ—Ü–µ–Ω–∫–µ –Ω–∞–≤—ã–∫–æ–≤ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞\n====================================================\n–ò–º—è: ${
			result.user?.name || ''
		}\n–û–ø—ã—Ç: ${result.user?.experience || ''}\n–î–∞—Ç–∞: ${new Date(
			result.created_at
		).toLocaleDateString()}\n\n–†–ï–ó–£–õ–¨–¢–ê–¢–´\n====================================================\n–£—Ä–æ–≤–µ–Ω—å: ${
			result.level?.level || ''
		} (${result.level?.description || ''})\n–û–±—â–∏–π –±–∞–ª–ª: ${
			result.overallScore
		}%\n–°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å: ${
			result.level?.nextLevel || ''
		}\n\n–î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û –ö–û–ú–ü–ï–¢–ï–ù–¶–ò–Ø–ú\n====================================================\n${Object.entries(
			result.categories || {}
		)
			.sort(([, a], [, b]) => b.score - a.score)
			.map(
				([cat, data]) =>
					`${data.name}: ${data.score}% ${
						data.score >= 70 ? '‚úÖ' : data.score >= 50 ? 'üìà' : '‚ö†Ô∏è'
					}`
			)
			.join(
				'\n'
			)}\n\n–°–ò–õ–¨–ù–´–ï –°–¢–û–†–û–ù–´\n====================================================\n${
			result.strengths && result.strengths.length > 0
				? result.strengths.map(s => `- ${s.name} (${s.score}%)`).join('\n')
				: '–¢—Ä–µ–±—É—é—Ç —Ä–∞–∑–≤–∏—Ç–∏—è'
		} \n\n–ó–û–ù–´ –†–ê–ó–í–ò–¢–ò–Ø\n====================================================\n${
			result.weaknesses && result.weaknesses.length > 0
				? result.weaknesses.map(w => `- ${w.name} (${w.score}%)`).join('\n')
				: '–í—Å–µ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏ –Ω–∞ —Ö–æ—Ä–æ—à–µ–º —É—Ä–æ–≤–Ω–µ'
		}\n\n${
			result.recommendations
				? `\n–ü–ï–†–°–û–ù–ê–õ–¨–ù–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –û–¢ AI\n====================================================\n${result.recommendations}`
				: ''
		}
	`
		navigator.clipboard.writeText(reportText)
		alert('–û—Ç—á–µ—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!')
	}

	const handleRestart = () => {
		window.location.href = '/'
	}

	return (
		<div>
			<ResultsScreen
				menteeInfo={result.user}
				results={{
					overallScore: result.overallScore,
					level: result.level,
					categories: result.categories,
					strengths: result.strengths,
					weaknesses: result.weaknesses,
				}}
				level={result.level}
				categories={result.categories}
				getScoreColor={score =>
					score >= 80
						? '#10b981'
						: score >= 60
						? '#3b82f6'
						: score >= 40
						? '#f59e42'
						: '#ef4444'
				}
				isGeneratingRecommendations={!result.recommendations}
				aiRecommendations={result.recommendations}
				onCopyReport={handleCopyReport}
				onRestart={handleRestart}
				resultId={id}
			/>
		</div>
	)
}
